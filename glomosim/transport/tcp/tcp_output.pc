/*
 * GloMoSim is COPYRIGHTED software.  Release 2.02 of GloMoSim is available 
 * at no cost to educational users only.
 *
 * Commercial use of this software requires a separate license.  No cost,
 * evaluation licenses are available for such purposes; please contact
 * info@scalable-networks.com
 *
 * By obtaining copies of this and any other files that comprise GloMoSim2.02,
 * you, the Licensee, agree to abide by the following conditions and
 * understandings with respect to the copyrighted software:
 *
 * 1.Permission to use, copy, and modify this software and its documentation
 *   for education and non-commercial research purposes only is hereby granted
 *   to Licensee, provided that the copyright notice, the original author's
 *   names and unit identification, and this permission notice appear on all
 *   such copies, and that no charge be made for such copies. Any entity
 *   desiring permission to use this software for any commercial or
 *   non-educational research purposes should contact: 
 *
 *   Professor Rajive Bagrodia 
 *   University of California, Los Angeles 
 *   Department of Computer Science 
 *   Box 951596 
 *   3532 Boelter Hall 
 *   Los Angeles, CA 90095-1596 
 *   rajive@cs.ucla.edu
 *
 * 2.NO REPRESENTATIONS ARE MADE ABOUT THE SUITABILITY OF THE SOFTWARE FOR ANY
 *   PURPOSE. IT IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
 *
 * 3.Neither the software developers, the Parallel Computing Lab, UCLA, or any
 *   affiliate of the UC system shall be liable for any damages suffered by
 *   Licensee from the use of this software.
 */

// Use the latest version of Parsec if this line causes a compiler error.
/*
 * $Id: tcp_output.pc,v 1.11 1999/09/28 05:26:33 ktang Exp $
 *
 * Ported from FreeBSD 2.2.2.
 * This file contains TCP output routine and ancillary functions.
 */

/*
 * Copyright (c) 1982, 1986, 1988, 1990, 1993, 1995
 *  The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *  This product includes software developed by the University of
 *  California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *  @(#)tcp_output.c    8.4 (Berkeley) 5/24/95
 *  $Id: tcp_output.pc,v 1.11 1999/09/28 05:26:33 ktang Exp $
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

#include "api.h"
#include "structmsg.h"
#include "transport.h"

#include "in_pcb.h"
#include "ip.h"
#include "tcpip.h"
#include "tcp_fsm.h"
#include "tcp_hdr.h"
#include "tcp_proto.h"
#include "tcp_seq.h"
#include "tcp_timer.h"
#include "tcp_var.h"
#include "network.h"

/*
 * Tcp output routine: figure out what should be sent and send it.
 */
void
tcp_output(node, tp, tcp_now, tcp_stat)
    GlomoNode *node;
    struct tcpcb *tp;
    unsigned long tcp_now;
    struct tcpstat *tcp_stat;
{
    long len, win;
    int off, flags;
    struct tcpiphdr *ti;
    unsigned char opt[TCP_MAXOLEN];
    unsigned int optlen, hdrlen;
    int idle, sendalot;
    struct inpcb *inp = tp->t_inpcb;
    Message *msg;
    unsigned char *tcpseg;
    int priority = inp->priority;

    /*
     * Determine length of data that should be transmitted,
     * and flags that will be used.
     * If there is some data or critical controls (SYN, RST)
     * to send, then transmit; otherwise, investigate further.
     */
    idle = (tp->snd_max == tp->snd_una);
    if (idle && tp->t_idle >= tp->t_rxtcur){
        /*
         * We have been idle for "a while" and no acks are
         * expected to clock out any data we send --
         * slow start to get ack "clock" running again.
         */
        tp->snd_cwnd = tp->t_maxseg;
    }

again:
    sendalot = 0;
    off = tp->snd_nxt - tp->snd_una;
    win = MIN(tp->snd_wnd, tp->snd_cwnd);

    flags = tcp_outflags[tp->t_state];
    /*
     * Get standard flags, and add SYN or FIN if requested by 'hidden'
     * state flags.
     */
    if (tp->t_flags & TF_NEEDFIN)
        flags |= TH_FIN;
    if (tp->t_flags & TF_NEEDSYN)
        flags |= TH_SYN;

    /*
     * If in persist timeout with window of 0, send 1 byte.
     * Otherwise, if window is small but nonzero
     * and timer expired, we will send what we can
     * and go to transmit state.
     */
    if (tp->t_force) {
        if (win == 0) {
            /*
             * If we still have some data to send, then
             * clear the FIN bit.  Usually this would
             * happen below when it realizes that we
             * aren't sending all the data.  However,
             * if we have exactly 1 byte of unset data,
             * then it won't clear the FIN bit below,
             * and if we are in persist state, we wind
             * up sending the packet without recording
             * that we sent the FIN bit.
             *
             * We can't just blindly clear the FIN bit,
             * because if we don't have any more data
             * to send then the probe will be the FIN
             * itself.
             */
            if (off < inp->inp_snd.cc)
                flags &= ~TH_FIN;
            win = 1;
        } else {
            tp->t_timer[TCPT_PERSIST] = 0;
            tp->t_rxtshift = 0;
        }
    }

    len = MIN( inp->inp_snd.cc, win) - off;

    /*
     * Lop off SYN bit if it has already been sent.  However, if this
     * is SYN-SENT state and if segment contains data, suppress sending
     * segment.
     */

    if ((flags & TH_SYN) && SEQ_GT(tp->snd_nxt, tp->snd_una)) { 
        flags &= ~TH_SYN;
        off--, len++;
        if (len > 0 && tp->t_state == TCPS_SYN_SENT) 
            return;
    }

    /*
     * Be careful not to send data and/or FIN on SYN segments
     * in cases when no CC option will be sent.
     * This measure is needed to prevent interoperability problems
     * with not fully conformant TCP implementations.
     */
    if ((flags & TH_SYN) && (tp->t_flags & TF_NOOPT)){
        len = 0;
        flags &= ~TH_FIN;
    }

    if (len < 0) {
        /*
         * If FIN has been sent but not acked,
         * but we haven't been called to retransmit,
         * len will be -1.  Otherwise, window shrank
         * after we sent into it.  If window shrank to 0,
         * cancel pending retransmit, pull snd_nxt back
         * to (closed) window, and set the persist timer
         * if it isn't already going.  If the window didn't
         * close completely, just wait for an ACK.
         */
        len = 0;
        if (win == 0) {
            tp->t_timer[TCPT_REXMT] = 0;
            tp->t_rxtshift = 0;
            tp->snd_nxt = tp->snd_una;
            if (tp->t_timer[TCPT_PERSIST] == 0)
                tcp_setpersist(tp);
        }
    }
    if (len > tp->t_maxseg) {
        len = tp->t_maxseg;
        sendalot = 1;
    }
    if (SEQ_LT(tp->snd_nxt + len, tp->snd_una + inp->inp_snd.cc))
        flags &= ~TH_FIN;

    win = sbspace(inp);  

    /*
     * Sender silly window avoidance.  If connection is idle
     * and can send all data, a maximum segment,
     * at least a maximum default-size segment do it,
     * or are forced, do it; otherwise don't bother.
     * If peer's buffer is tiny, then send
     * when window is at least half open.
     * If retransmitting (possibly after persist timer forced us
     * to send into a small window), then must resend.
     */
    if (len) {
        if (len == tp->t_maxseg)
            goto send0;
        if ((idle || tp->t_flags & TF_NODELAY) &&
            (tp->t_flags & TF_NOPUSH) == 0 &&
            len + off >= inp->inp_snd.cc)
            goto send0;
        if (tp->t_force)
            goto send0;
        if (len >= tp->max_sndwnd / 2 && tp->max_sndwnd > 0)
            goto send0;
        if (SEQ_LT(tp->snd_nxt, tp->snd_max))
            goto send0;
    }

    /*
     * Compare available window to amount of window
     * known to peer (as advertised window less
     * next expected input).  If the difference is at least two
     * max size segments, or at least 50% of the maximum possible
     * window, then want to send a window update to peer.
     */
    if (win > 0) {
        /*
         * "adv" is the amount we can increase the window,
         * taking into account that we are limited by
         * TCP_MAXWIN << tp->rcv_scale.
         */
        long adv = MIN(win, (long)TCP_MAXWIN << tp->rcv_scale) -
            (tp->rcv_adv - tp->rcv_nxt);

        if (adv >= (long) (2 * tp->t_maxseg))
            goto send0;
        if (2 * adv >= (long) inp->inp_rcv_hiwat)
            goto send0;
    }

    /*
     * Send if we owe peer an ACK.
     */
    if (tp->t_flags & TF_ACKNOW)
        goto send0;
    if ((flags & TH_RST) ||
        ((flags & TH_SYN) && (tp->t_flags & TF_NEEDSYN) == 0))
        goto send0;
    if (SEQ_GT(tp->snd_up, tp->snd_una))
        goto send0;
    /*
     * If our state indicates that FIN should be sent
     * and we have not yet done so, or we're retransmitting the FIN,
     * then we need to send.
     */
    if (flags & TH_FIN &&
        ((tp->t_flags & TF_SENTFIN) == 0 || tp->snd_nxt == tp->snd_una))
        goto send0;

    /*
     * TCP window updates are not reliable, rather a polling protocol
     * using ``persist'' packets is used to insure receipt of window
     * updates.  The three ``states'' for the output side are:
     *  idle            not doing retransmits or persists
     *  persisting      to move a small or zero window
     *  (re)transmitting    and thereby not persisting
     *
     * tp->t_timer[TCPT_PERSIST]
     *  is set when we are in persist state.
     * tp->t_force
     *  is set when we are called to send a persist packet.
     * tp->t_timer[TCPT_REXMT]
     *  is set when we are retransmitting
     * The output side is idle when both timers are zero.
     *
     * If send window is too small, there is data to transmit, and no
     * retransmit or persist is pending, then go to persist state.
     * If nothing happens soon, send when timer expires:
     * if window is nonzero, transmit what we can,
     * otherwise force out a byte.
     */
    if (inp->inp_snd.cc && tp->t_timer[TCPT_REXMT] == 0 &&
        tp->t_timer[TCPT_PERSIST] == 0) {
        tp->t_rxtshift = 0;
        tcp_setpersist(tp);
    }

    /*
     * No reason to send a segment, just return.
     */

    return;

send0:
    /*
     * Before ESTABLISHED, force sending of initial options
     * unless TCP set not to do any options.
     * NOTE: we assume that the IP/TCP header plus TCP options
     * always fit in a single mbuf, leaving room for a maximum
     * link header, i.e.
     *  max_linkhdr + sizeof (struct tcpiphdr) + optlen <= MHLEN
     */
    optlen = 0;
    hdrlen = sizeof (struct tcpiphdr);
    if (flags & TH_SYN) {
        tp->snd_nxt = tp->iss;
        if ((tp->t_flags & TF_NOOPT) == 0) {
            unsigned short mss;

            opt[0] = TCPOPT_MAXSEG;
            opt[1] = TCPOLEN_MAXSEG;
            mss = (unsigned short) tcp_mssopt();
            (void)memcpy(opt + 2, &mss, sizeof(mss));
            optlen = TCPOLEN_MAXSEG;

            if ((tp->t_flags & TF_REQ_SCALE) &&
                ((flags & TH_ACK) == 0 ||
                (tp->t_flags & TF_RCVD_SCALE))) {
                *((unsigned long *) (opt + optlen)) = (
                    TCPOPT_NOP << 24 |
                    TCPOPT_WINDOW << 16 |
                    TCPOLEN_WINDOW << 8 |
                    tp->request_r_scale);
                optlen += 4;
            }
        }
    }

    /*
     * Send a timestamp and echo-reply if this is a SYN and our side
     * wants to use timestamps (TF_REQ_TSTMP is set) or both our side
     * and our peer have sent timestamps in our SYN's.
     */
    if ((tp->t_flags & (TF_REQ_TSTMP|TF_NOOPT)) == TF_REQ_TSTMP &&
        (flags & TH_RST) == 0 &&
        ((flags & TH_ACK) == 0 ||
         (tp->t_flags & TF_RCVD_TSTMP))) {
        unsigned long *lp = (unsigned long *)(opt + optlen);

        /* Form timestamp option as shown in appendix A of RFC 1323. */
        *lp++ = TCPOPT_TSTAMP_HDR;
        *lp++ = tcp_now;
        *lp   = tp->ts_recent;
        optlen += TCPOLEN_TSTAMP_APPA;
    }

    hdrlen += optlen;

    /*
     * Adjust data length if insertion of options will
     * bump the packet length beyond the t_maxseg length.
     * Clear the FIN bit because we cut off the tail of
     * the segment.
     */
     if (len + optlen > tp->t_maxseg) {
        /*
         * If there is still more to send, don't close the connection.
         */
        flags &= ~TH_FIN;
        len = tp->t_maxseg - optlen;
        sendalot = 1;
    }


    /*
     * Create a TCP segment, attaching a copy of data to
     * be transmitted, and initialize the header from
     * the template for sends on this connection.
     */

    /* allocate the space for a tcp segment and copy data*/
    msg = GLOMO_MsgAlloc(node, 0, 0, 0);
    GLOMO_MsgPacketAlloc(node, msg, len + hdrlen);
    tcpseg = (unsigned char *) msg->packet; 
    assert(tcpseg != NULL);

    if (len) {
        if (tcp_stat) {
            if (tp->t_force && len == 1)
                tcp_stat->tcps_sndprobe++;
            else if (SEQ_LT(tp->snd_nxt, tp->snd_max)) {
                tcp_stat->tcps_sndrexmitpack++;
                tcp_stat->tcps_sndrexmitbyte += len;
            } else {
                tcp_stat->tcps_sndpack++;
                tcp_stat->tcps_sndbyte += len;
            }
        }

        memcpy(tcpseg+hdrlen, (inp->inp_snd.buffer)+off, len); 

        /*
         * If we're sending everything we've got, set PUSH.
         * (This will keep happy those implementations which only
         * give data to the user when a buffer fills or
         * a PUSH comes in.)
         */
        if (off + len == inp->inp_snd.cc)
            flags |= TH_PUSH;
    } else {                              /* len == 0 */
        if (tcp_stat) {
            if (flags & (TH_SYN|TH_FIN|TH_RST))
                tcp_stat->tcps_sndctrl++;
            else if (tp->t_flags & TF_ACKNOW)
                tcp_stat->tcps_sndacks++;
            else if (SEQ_GT(tp->snd_up, tp->snd_una))
                tcp_stat->tcps_sndurg++;
            else
                tcp_stat->tcps_sndwinup++;
        }
    }
    ti = (struct tcpiphdr *)tcpseg;

    assert(tp->t_template != 0);
    (void)memcpy(ti, tp->t_template, sizeof (struct tcpiphdr));

    /*
     * Fill in fields, remembering maximum advertised
     * window for use in delaying messages about window sizes.
     * If resending a FIN, be sure not to use a new sequence number.
     */
    if (flags & TH_FIN && tp->t_flags & TF_SENTFIN &&
        tp->snd_nxt == tp->snd_max)
        tp->snd_nxt--;
    /*
     * If we are doing retransmissions, then snd_nxt will
     * not reflect the first unsent octet.  For ACK only
     * packets, we do not want the sequence number of the
     * retransmitted packet, we want the sequence number
     * of the next unsent octet.  So, if there is no data
     * (and no SYN or FIN), use snd_max instead of snd_nxt
     * when filling in ti_seq.  But if we are in persist
     * state, snd_max might reflect one byte beyond the
     * right edge of the window, so use snd_nxt in that
     * case, since we know we aren't doing a retransmission.
     * (retransmit and persist are mutually exclusive...)
     */
    if (len || (flags & (TH_SYN|TH_FIN)) || tp->t_timer[TCPT_PERSIST])
        ti->ti_seq = tp->snd_nxt;
    else
        ti->ti_seq = tp->snd_max;
    ti->ti_ack = tp->rcv_nxt;
    if (optlen) {
        memcpy(ti + 1, opt, optlen);
        ti->ti_off = (sizeof (struct tcphdr) + optlen) >> 2;
    }
    ti->ti_flags = flags;
    /*
     * Calculate receive window.  Don't shrink window,
     * but avoid silly window syndrome.
     */
    if (win < (long)(inp->inp_rcv_hiwat / 4) && win < (long)tp->t_maxseg)
        win = 0;
    if (win > (long)TCP_MAXWIN << tp->rcv_scale)
        win = (long)TCP_MAXWIN << tp->rcv_scale;
    if (win < (long)(tp->rcv_adv - tp->rcv_nxt))
        win = (long)(tp->rcv_adv - tp->rcv_nxt);
    ti->ti_win = (unsigned short) (win>>tp->rcv_scale);
    if (SEQ_GT(tp->snd_up, tp->snd_nxt)) {
        ti->ti_urp = (unsigned short)(tp->snd_up - tp->snd_nxt);
        ti->ti_flags |= TH_URG;
    } else
        /*
         * If no urgent pointer to send, then we pull
         * the urgent pointer to the left edge of the send window
         * so that it doesn't drift into the send window on sequence
         * number wraparound.
         */
        tp->snd_up = tp->snd_una;       /* drag it along */

    /*
     * Put TCP length in extended header, and then
     * checksum extended header and data.
     */
    if (len + optlen) {
        ti->ti_len = (unsigned short)(sizeof (struct tcphdr) + optlen + len);
    }
    ti->ti_sum = in_cksum((unsigned short *)tcpseg, (int)(hdrlen + len)); 

    /*
     * In transmit state, time the transmission and arrange for
     * the retransmit.  In persist state, just set snd_max.
     */
    if (tp->t_force == 0 || tp->t_timer[TCPT_PERSIST] == 0) {
        tcp_seq startseq = tp->snd_nxt;

        /*
         * Advance snd_nxt over sequence space of this segment.
         */
        if (flags & (TH_SYN|TH_FIN)) {
            if (flags & TH_SYN)
                tp->snd_nxt++;
            if (flags & TH_FIN) {
                tp->snd_nxt++;
                tp->t_flags |= TF_SENTFIN;
            }
        }
        tp->snd_nxt += len;
        if (SEQ_GT(tp->snd_nxt, tp->snd_max)) {
            tp->snd_max = tp->snd_nxt;
            /*
             * Time this transmission if not a retransmission and
             * not currently timing anything.
             */
            if (tp->t_rtt == 0) {
                tp->t_rtt = 1;
                tp->t_rtseq = startseq;
                if (tcp_stat)
                    tcp_stat->tcps_segstimed++;
            }
        }

        /*
         * Set retransmit timer if not currently set,
         * and not doing an ack or a keep-alive probe.
         * Initial value for retransmit timer is smoothed
         * round-trip time + 2 * round-trip time variance.
         * Initialize shift counter which is used for backoff
         * of retransmit time.
         */
        if (tp->t_timer[TCPT_REXMT] == 0 &&
            tp->snd_nxt != tp->snd_una) {
            tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
            if (tp->t_timer[TCPT_PERSIST]) {
                tp->t_timer[TCPT_PERSIST] = 0;
                tp->t_rxtshift = 0;
            }
        }
    } else {
        if (SEQ_GT(tp->snd_nxt + len, tp->snd_max)) {
            tp->snd_max = tp->snd_nxt + len;
        }
    }


    /*
    *    Send the packet and remove the IP header so that
    *    it can be put back on in IP Layer.
    *    
    */

    { 
        NODE_ADDR destinationAddress = ti->ti_dst;

        GLOMO_MsgRemoveHeader(node, msg, sizeof(struct ipovly));
        NetworkIpReceivePacketFromTransportLayer(node, msg, destinationAddress,
                                                 priority, IPPROTO_TCP, 
                                                 TRANSPORT_DELAY); 
          
    }

         

    if (tcp_stat)
        tcp_stat->tcps_sndtotal++;

    /*
     * Data sent (as far as we can tell).
     * If this advertises a larger window than any other segment,
     * then remember the size of the advertised window.
     * Any pending ACK has now been sent.
     */
    if (win > 0 && SEQ_GT(tp->rcv_nxt+win, tp->rcv_adv))
        tp->rcv_adv = tp->rcv_nxt + win;
    tp->last_ack_sent = tp->rcv_nxt;
    tp->t_flags &= ~(TF_ACKNOW|TF_DELACK);
    if (sendalot)
        goto again;
    return;
}

void
tcp_setpersist(tp)
    struct tcpcb *tp;
{
    int t = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;

    assert(tp->t_timer[TCPT_REXMT] == 0);
    /*
     * Start/restart persistance timer.
     */
    TCPT_RANGESET(tp->t_timer[TCPT_PERSIST],
        t * tcp_backoff[tp->t_rxtshift],
        TCPTV_PERSMIN, TCPTV_PERSMAX);
    if (tp->t_rxtshift < TCP_MAXRXTSHIFT)
        tp->t_rxtshift++;
}

