/*
 * GloMoSim is COPYRIGHTED software.  Release 2.02 of GloMoSim is available 
 * at no cost to educational users only.
 *
 * Commercial use of this software requires a separate license.  No cost,
 * evaluation licenses are available for such purposes; please contact
 * info@scalable-networks.com
 *
 * By obtaining copies of this and any other files that comprise GloMoSim2.02,
 * you, the Licensee, agree to abide by the following conditions and
 * understandings with respect to the copyrighted software:
 *
 * 1.Permission to use, copy, and modify this software and its documentation
 *   for education and non-commercial research purposes only is hereby granted
 *   to Licensee, provided that the copyright notice, the original author's
 *   names and unit identification, and this permission notice appear on all
 *   such copies, and that no charge be made for such copies. Any entity
 *   desiring permission to use this software for any commercial or
 *   non-educational research purposes should contact: 
 *
 *   Professor Rajive Bagrodia 
 *   University of California, Los Angeles 
 *   Department of Computer Science 
 *   Box 951596 
 *   3532 Boelter Hall 
 *   Los Angeles, CA 90095-1596 
 *   rajive@cs.ucla.edu
 *
 * 2.NO REPRESENTATIONS ARE MADE ABOUT THE SUITABILITY OF THE SOFTWARE FOR ANY
 *   PURPOSE. IT IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
 *
 * 3.Neither the software developers, the Parallel Computing Lab, UCLA, or any
 *   affiliate of the UC system shall be liable for any damages suffered by
 *   Licensee from the use of this software.
 */

// Use the latest version of Parsec if this line causes a compiler error.
/*
 * $Id: telnet_client.pc,v 1.13 2001/02/15 03:17:26 mineo Exp $
 *
 * This file contains initialization function, message processing
 * function, and finalize function used by telnet client. 
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <assert.h> 

#include "api.h"
#include "structmsg.h"
#include "fileio.h"
#include "message.h"

#include "application.h"
#include "app_util.h"
#include "telnet_client.h"
#include "tcp.h"
#include "tcpapps.h"

#define noDEBUG


/*
 * NAME:        AppLayerTelnetClient.
 * PURPOSE:     Models the behaviour of TelnetClient Client on receiving the
 *              message encapsulated in msg.
 * PARAMETERS:  nodePtr - pointer to the node which received the message.
 *              msg - message received by the layer
 * RETURN:      none.
 */
void 
AppLayerTelnetClient(GlomoNode *nodePtr, Message *msg)
{
    char buf[GLOMO_MAX_STRING_LENGTH];
    GlomoAppTelnetClient *clientPtr;

    ctoa(simclock(), buf);

    switch(msg->eventType) 
    {
        case MSG_APP_FromTransOpenResult: 
        {
            TransportToAppOpenResult *openResult;

            openResult = (TransportToAppOpenResult *) msg->info;
 
            #ifdef DEBUG
                printf("%s: node %u got OpenResult\n", buf, nodePtr->nodeAddr);
            #endif

            assert(openResult->type == TCP_CONN_ACTIVE_OPEN);

            if (openResult->connectionId < 0) 
            {
                nodePtr->appData.numAppTcpFailure ++;
            } 
            else 
            {
                GlomoAppTelnetClient *clientPtr; 
                clientPtr = AppTelnetClientUpdateTelnetClient(nodePtr, 
                                                              openResult);
                assert(clientPtr != NULL);
                AppTelnetClientScheduleNextPkt(nodePtr, clientPtr);
            }

            break;
        }
        case MSG_APP_FromTransDataSent:
        {
            TransportToAppDataSent *dataSent;

            dataSent = (TransportToAppDataSent *) msg->info;

            #ifdef DEBUG
                printf("%s: node %u sent data %ld\n", buf, nodePtr->nodeAddr,
                       dataSent->length); 
            #endif

            clientPtr = AppTelnetClientGetTelnetClient(nodePtr, 
                                        dataSent->connectionId);
            assert(clientPtr != NULL);
            clientPtr->numBytesSent += dataSent->length;

            if (clientPtr->sessionIsClosed == FALSE)
            {
                AppTelnetClientScheduleNextPkt(nodePtr, clientPtr); 
            }
            else
            {
                AppTcpCloseConnection(nodePtr, TRANSPORT_PROTOCOL_TCP, 
                                      clientPtr->connectionId);
            }

            break;
        }  
        case MSG_APP_FromTransDataReceived: 
        {
            TransportToAppDataReceived *dataRecvd;

            dataRecvd = (TransportToAppDataReceived *) msg->info;

            #ifdef DEBUG
                printf("%s: node %u received data %ld\n",
                       buf, nodePtr->nodeAddr, msg->packetSize);
            #endif

            clientPtr = AppTelnetClientGetTelnetClient(nodePtr, 
                                                 dataRecvd->connectionId);

            assert(clientPtr != NULL);

            clientPtr->numBytesRecvd += msg->packetSize;

            break;
        }
        case MSG_APP_TimerExpired:
        {
            AppTimer *timer;

            timer = (AppTimer *) msg->info;

            #ifdef DEBUG
                printf("%s: node %u got timer %d\n", buf, nodePtr->nodeAddr,
                       timer->type); 
            #endif

            clientPtr = AppTelnetClientGetTelnetClient(nodePtr, 
                                                       timer->connectionId);

            assert(clientPtr != NULL);

            switch (timer->type) 
            {
                case APP_TIMER_SEND_PKT:
                    if (clientPtr->sessionIsClosed == FALSE)
                    {
                        AppTcpSendData(nodePtr, TRANSPORT_PROTOCOL_TCP, 
                                       clientPtr->connectionId, "d", 1);
                    }

                    break; 

                case APP_TIMER_CLOSE_SESS:
                    AppTcpSendData(nodePtr, TRANSPORT_PROTOCOL_TCP, 
                                   clientPtr->connectionId, "c", 1);

                    clientPtr->sessionIsClosed = TRUE;

                    break;

                default:
                    assert(FALSE);
            }
           
            break;
        }   
        case MSG_APP_FromTransCloseResult:
        {
            TransportToAppCloseResult *closeResult;

            closeResult = (TransportToAppCloseResult *) msg->info;

            #ifdef DEBUG
                printf("%s: node %u got close result\n", 
                       buf, nodePtr->nodeAddr);
            #endif

            clientPtr = AppTelnetClientGetTelnetClient(nodePtr, 
                                                 closeResult->connectionId);
            assert(clientPtr != NULL);

            if (clientPtr->sessionIsClosed == FALSE) 
            {
                clientPtr->sessionIsClosed = TRUE;
                clientPtr->sessionFinish = simclock();
            }

            break;
        }
        default:
            ctoa(simclock(), buf);
            printf("Time %s: Node %u received message of unknown type"
                   " %ld.\n", buf, nodePtr->nodeAddr, msg->eventType);
            assert(FALSE);
    }

    GLOMO_MsgFree(nodePtr, msg);
}

/*
 * NAME:        AppTelnetClientInit. 
 * PURPOSE:     Initialize a TelnetClient session. 
 * PARAMETERS:  nodePtr - pointer to the node, 
 *              serverAddr - address of the server,
 *              sessDuration - length of telnet session.
 *              waitTime - time until the session starts.
 * RETURN:      none. 
 */
void
AppTelnetClientInit(GlomoNode *nodePtr, NODE_ADDR serverAddr,
                    clocktype sessDuration, clocktype waitTime)
{
    GlomoAppTelnetClient *clientPtr;

    clientPtr = AppTelnetClientNewTelnetClient(nodePtr, serverAddr, 
                                               sessDuration);
                                        
    if (clientPtr == NULL)
    {
        printf("TELNET Client: Node %ld cannot allocate "
               "new telnet client\n", nodePtr->nodeAddr);

        assert(FALSE);
    }

    AppTcpOpenConnectionWithPriority(nodePtr, 
                                     TRANSPORT_PROTOCOL_TCP, 
                                     APP_TELNET_CLIENT,
                                     serverAddr, 
                                     (short)APP_TELNET_SERVER, 
                                     clientPtr->uniqueId, 
                                     waitTime, 
                                     NON_REAL_TIME);
}

/*
 * NAME:        AppTelnetClientFinalize. 
 * PURPOSE:     Collect statistics of a TelnetClient session. 
 * PARAMETERS:  nodePtr - pointer to the node.
 *              clientPtr - pointer to the telnet client data structure. 
 * RETURN:      none. 
 */
void
AppTelnetClientFinalize(GlomoNode *nodePtr, GlomoAppTelnetClient *clientPtr)
{
    clocktype throughput;
    char clockStr[GLOMO_MAX_STRING_LENGTH];
    char startStr[GLOMO_MAX_STRING_LENGTH];
    char closeStr[GLOMO_MAX_STRING_LENGTH];
    char buf[GLOMO_MAX_STRING_LENGTH];
    char throughputStr[GLOMO_MAX_STRING_LENGTH];

    ctoa(clientPtr->sessionStart, startStr);

    if (clientPtr->sessionIsClosed == FALSE) 
    {
        clientPtr->sessionFinish = simclock();
        ctoa(simclock(), clockStr);
        sprintf(closeStr, "%s ns (not closed)", clockStr);
    }
    else 
    {
        ctoa(clientPtr->sessionFinish, clockStr);
        sprintf(closeStr, "%s ns (closed)", clockStr);
    }

    if (clientPtr->sessionFinish <= clientPtr->sessionStart) 
    {
        throughput = 0;         
    } 
    else 
    {
        throughput = (clientPtr->numBytesSent * 8.0 * SECOND) /
                     (clientPtr->sessionFinish - clientPtr->sessionStart);
    }

    ctoa(throughput, throughputStr);

    sprintf(buf, "from %ld to %ld (cid = %d), start = %s, end = %s, "
            "bytes sent = %ld B, bytes recv = %ld B, throughput = %s bps",
            clientPtr->localAddr, clientPtr->remoteAddr,
            clientPtr->connectionId, startStr, closeStr,
            clientPtr->numBytesSent, clientPtr->numBytesRecvd,
            throughputStr);

    if (nodePtr->appData.appStats == TRUE)
        GLOMO_PrintStat(nodePtr, "AppTelnetClient", buf);
}

/*
 * NAME:        AppTelnetClientGetTelnetClient.
 * PURPOSE:     search for a telnet client data structure. 
 * PARAMETERS:  nodePtr - pointer to the node, 
 *              connId - connection ID of the telnet client. 
 * RETURN:      the pointer to the telnet client data structure,
 *              NULL if nothing found.
 */
static GlomoAppTelnetClient *
AppTelnetClientGetTelnetClient(GlomoNode *nodePtr, int connId)
{
    AppInfo *appList = nodePtr->appData.appPtr;
    GlomoAppTelnetClient *telnetClient;
    
    for (; appList != NULL; appList = appList->appNext) 
    {
        if (appList->appType == APP_TELNET_CLIENT) 
        {
            telnetClient = (GlomoAppTelnetClient *) appList->appDetail;

            if (telnetClient->connectionId == connId) 
            {
                return telnetClient;
            }
        }
    }

    return NULL;
}


/*
 * NAME:        AppTelnetClientUpdateTelnetClient.
 * PURPOSE:     create a new telnet client data structure, place it
                at the beginning of the application list. 
 * PARAMETERS:  nodePtr - pointer to the node, 
 *              openResult - result of the open request. 
 * RETRUN:      the pointer to the created telnet client data structure,
 *              NULL if no data structure allocated. 
 */
static GlomoAppTelnetClient *
AppTelnetClientUpdateTelnetClient(GlomoNode *nodePtr, 
                                  TransportToAppOpenResult *openResult)
{
    AppInfo *appList = nodePtr->appData.appPtr;
    GlomoAppTelnetClient *telnetClient;
    GlomoAppTelnetClient *tmpTelnetClient;

    for (; appList != NULL; appList = appList->appNext)
    {
        if (appList->appType == APP_TELNET_CLIENT)
        {
            tmpTelnetClient = (GlomoAppTelnetClient *) appList->appDetail;

            #ifdef DEBUG
                printf("TELNET Client: Node %ld comparing uniqueId "
                       "%ld with %ld\n", nodePtr->nodeAddr,
                       tmpTelnetClient->uniqueId, openResult->uniqueId);
            #endif

            if (tmpTelnetClient->uniqueId == openResult->uniqueId)
            {
                telnetClient = tmpTelnetClient;
                break;
            }
        }
    }

    if (telnetClient == NULL)
    {
        assert(FALSE);
    }

    /*
     * fill in connection id, etc.
     */
    telnetClient->connectionId = openResult->connectionId;
    telnetClient->localAddr = openResult->localAddr;
    telnetClient->remoteAddr = openResult->remoteAddr;
    telnetClient->sessionStart = simclock();

    telnetClient->sessionFinish = simclock() + telnetClient->sessDuration; 
    telnetClient->sessionIsClosed = FALSE;

    return telnetClient;
}


/*
 * NAME:        AppTelnetClientNewTelnetClient.
 * PURPOSE:     create a new telnet client data structure, place it
                at the beginning of the application list. 
 * PARAMETERS:  nodePtr - pointer to the node, 
 *              serverAddr - server node of this telnet session.
 *              sessDuration - length of telnet session.
 * RETRUN:      the pointer to the created telnet client data structure,
 *              NULL if no data structure allocated. 
 */
static GlomoAppTelnetClient *
AppTelnetClientNewTelnetClient(GlomoNode *nodePtr, 
                               NODE_ADDR serverAddr,
                               clocktype sessDuration)
{
    AppInfo *newApp;
    GlomoAppTelnetClient *telnetClient;
    clocktype sessionTime;

    newApp = (AppInfo *) pc_malloc(sizeof(AppInfo));

    if (newApp == NULL) 
    {
        assert(FALSE);
    }

    telnetClient = (GlomoAppTelnetClient *) 
                    pc_malloc(sizeof(GlomoAppTelnetClient)); 

    if (telnetClient == NULL) 
    {
        assert(FALSE);
    }

    /*
     * fill in connection id, etc.
     */
    newApp->appType = APP_TELNET_CLIENT;  
    telnetClient->connectionId = -1;
    telnetClient->uniqueId = nodePtr->appData.uniqueId++;

    telnetClient->localAddr = nodePtr->nodeAddr;
    telnetClient->remoteAddr = serverAddr;

    if (sessDuration > 0) 
    {
        telnetClient->sessDuration = sessDuration;
    }
    else 
    {
        telnetClient->sessDuration = AppTelnetClientSessDuration(nodePtr);
    }

    telnetClient->numBytesSent = 0;
    telnetClient->numBytesRecvd = 0;

    newApp->appDetail = telnetClient;
    newApp->appNext = nodePtr->appData.appPtr; 

    nodePtr->appData.appPtr = newApp;

    return telnetClient;
}



/*
 * NAME:        AppTelnetClientScheduleNextPkt.
 * PURPOSE:     schedule the next packet the client will send.  If next packet
 *              won't arrive until the finish deadline, schedule a close.
 * PARAMETERS:  nodePtr - pointer to the node, 
 *              clientPtr - pointer to the telnet client data structure. 
 * RETRUN:      none. 
 */
static void
AppTelnetClientScheduleNextPkt(GlomoNode *nodePtr, 
                               GlomoAppTelnetClient *clientPtr)
{
    clocktype interval = AppTelnetClientPktInterval(nodePtr);
    Message *timerMsg;
    AppTimer *timer;

    timerMsg = GLOMO_MsgAlloc(nodePtr, GLOMO_APP_LAYER, 
                              APP_TELNET_CLIENT, MSG_APP_TimerExpired); 

    GLOMO_MsgInfoAlloc(nodePtr, timerMsg, sizeof(AppTimer));

    timer = (AppTimer *)timerMsg->info;
    timer->connectionId = clientPtr->connectionId;

    if ((simclock() + interval) < clientPtr->sessionFinish) 
    {
        timer->type = APP_TIMER_SEND_PKT;
    } 
    else 
    {
        timer->type = APP_TIMER_CLOSE_SESS;
        interval = clientPtr->sessionFinish - simclock();
    } 

    GLOMO_MsgSend(nodePtr, timerMsg, interval);
}

/*
 * NAME:        AppTelnetClientSessDuration.
 * PURPOSE:     call tcplib function telnet_duration to get the duration
 *              of this session. 
 * PARAMETERS:  nodePtr - pointer to the node.
 * RETRUN:      session duration in clocktype. 
 */
static clocktype
AppTelnetClientSessDuration(GlomoNode *nodePtr)
{
    float duration;
    duration = telnet_duration(nodePtr->seed);

    #ifdef DEBUG
        printf("TELNET duration = %f\n", duration);
    #endif

    return (((clocktype)(duration + 0.5)) * MILLI_SECOND);
}

/*
 * NAME:        AppTelnetClientPktInterval.
 * PURPOSE:     call tcplib function telnet_interarrival to get the 
 *              between the arrival of the next packet and the current one. 
 * PARAMETERS:  nodePtr - pointer to the node.
 * RETRUN:      interarrival time in clocktype. 
 */
static clocktype
AppTelnetClientPktInterval(GlomoNode *nodePtr)
{
    float interval;
    interval = telnet_interarrival(nodePtr->seed);

    #ifdef DEBUG
        printf("TELNET interarrival = %f\n", interval);
    #endif

    return (((clocktype)(interval + 0.5)) * MILLI_SECOND); 
}

